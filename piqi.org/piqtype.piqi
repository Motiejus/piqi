% Piqi-spec for Piqi type definitions
%
% This file is included from "piqi.piqi"
%
% Copyright 2009, 2010, 2011, 2012 Anton Lavrik


.module piqi.org/piqtype

.include [ .module piqi.org/piqast ]


(.custom-field ocaml-module ocaml-name erlang-name proto-name)


.variant [
    .name piqdef

    % user-defined types
    .option [ .type record ]
    .option [ .type variant ]
    .option [ .type enum ]
    .option [ .type alias ]
    .option [
        .type list
        .ocaml-name "list"
    ]
]


.variant [
    .name piqtype

    % user-defined types
    .option [ .type piqdef ]

    % built-in types
    .option [ .name int ]
    .option [ .name float ]
    .option [ .name bool ]
    .option [ .name string ]
    .option [ .name binary ]
    .option [ .name text ]

    .option [ .name word ]
    .option [ .name any ]
]


.variant [
    .name piqi-type

    % built-in types
    .option [ .name int ]
    .option [ .name float ]
    .option [ .name bool ]
    .option [ .name string ]
    .option [ .name binary ]
    .option [ .name text ]

    .option [ .name word ]
    .option [ .name any ]
]


.alias [
    .name type
    .type name

    .ocaml-name "typename"
]


.record [
    .name record 
    .erlang-name "piq_record"

    .field [ .type name ]
    .field [
        .type field
        .repeated
    ]
]


.record [
    .name field
    .field [
        .type name
        .optional
    ]
    .field [
        .type type
        .optional
    ]
    .field [
        .name mode
        .type field-mode
        .optional
        .default.required
    ]

    .field [
        .name default
        .type piq-any % the type should correspond with the field type
        .optional
    ]
]


.variant [
    .name field-mode
    .option [ required ]
    .option [ optional ]
    .option [ repeated ]
]


.record [
    .name variant
    .field [ .type name ]
    .field [
        .type option
        .repeated % > 1
    ]
]


.record [
    .name option

    % NOTE: either name or type have to be present
    .field [
        .type name
        .optional
    ]
    .field [
        .type type
        .optional
    ]
]


.alias [
    % restriction. enum options shouldn't specify type and must specify name
    .name enum
    .type variant

    .proto-name "piq_enum"
]


.record [
    .name alias

    .field [ .type name ]

    % either type or piqi-type fields must be present; we don't use variant here
    % in order to simplify external representation which is going to be flat in
    % such case, as opposed to nested if we used variant
    .field [
        .type type
        .optional
    ]

    .field [
        .type piqi-type
        .optional
    ]
]


.record [
    .name list
    .ocaml-name "piqlist"
    .erlang-name "piq_list"

    .field [ .type name ]
    .field [ .type type ]
]

