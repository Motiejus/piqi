
.include [ .module piqi.org/piqi-lang ]


.extend [
    .typedef import

    .with.field [
        .type piqi
        .optional
    ]
]


.variant [
    .name namespace
    .option [ .type piqi ]
    .option [ .type import ]
]


.extend [
    (.typedef record variant enum alias list)

    .with.field [
        .name parent
        .type namespace
        .optional
    ]
]


.extend [
    .typedef record

    % record's fields ordered by integer wire code
    .with.field [
        .name wire-field
        .type field
        .repeated
    ]
]


.extend [
    .typedef piqi

    .with.field [ .name extended-typedef .type typedef .repeated ]
    .with.field [ .name extended-func-typedef .type typedef .repeated ]

    .with.field [ .name resolved-typedef .type typedef .repeated ]
    .with.field [ .name imported-typedef .type typedef .repeated ]

    .with.field [ .name resolved-import .type import .repeated ]
    .with.field [ .name extended-import .type import .repeated ]

    .with.field [ .name resolved-func .type function .repeated ]
    .with.field [ .name extended-func .type function .repeated ]

    .with.field [ .name included-piqi .type piqi .repeated ]

    .with.field [ .name original-piqi .type piqi .optional ]
    .with.field [ .name ast .type ast .optional ]
]


.extend [
    .typedef function

    .with.field [
        .name resolved-input
        .type typedef
        .optional
    ]

    .with.field [
        .name resolved-output
        .type typedef
        .optional
    ]

    .with.field [
        .name resolved-error
        .type typedef
        .optional
    ]
]


.extend [
    (.typedef alias record variant enum list)

    % if type definition is a function parameter, i.e. was defined inside
    % function definition
    .with.field [
        .name is-func-param
        .optional
    ]
]


.extend [
    (.typedef alias list field option)

    .with.field [
        .type piqtype
        .optional
    ]
]


.variant [
    .name piqtype

    % user-defined types
    .option [ .type typedef ]

    % built-in types
    .option [ .type piqi-type ]
]


.extend [
    .typedef ast

    % These two token types are used only in several special cases, and can't be
    % represented in Piq text format directly.

    .with.option [
        % Raw word -- a valid utf8 Piq word: may be parsed as either of these:
        % word, bool, number, string, binary

        .name raw-word
        .type word
    ]
    .with.option [
        % Raw binary -- just a sequence of bytes: may be parsed as either binary
        % or utf8 string

        .name raw-binary
        .type binary
    ]
]


.extend [
    .typedef any

    % this field is used for processing default values represented as JSON or
    % XML data structures

    .with.field [
        .name ref % reference to JSON or XML value/parse tree
        .type int
        .optional
    ]
]


.extend [
    .typedef ast

    .with.option [
        .type piqi-any
    ]
]


% Alternative name for field and option. It is used by Piq parse
% (piqobj_of_piqi) if a field or an option can be referred using an alternative
% name. An example of such alternative name can be .getopt-letter defined in
% piqi.org/piqi-getopt.piqi
.extend [
    (.typedef field option)

    .with.field [
        .name alt-name
        .type word
        .optional
    ]
]

