% The current Piqi self-specification
%
% This file contains defintion of the Piqi self-specification
% 
% Copyright 2009, 2010, 2011, 2012 Anton Lavrik


% aliases for built-in types; these definitions are automatically included in
% each Piqi module except modules named "piqi"

.alias [ .name bool       .piqi-type.bool ]
.alias [ .name string     .piqi-type.string ]
.alias [ .name binary     .piqi-type.binary ]


.alias [ .name piqi-any   .piqi-type.any ]


.alias [
    .name int
    .piqi-type.int

    .protobuf-type "sint32"
    .protobuf-wire-type.zigzag-varint
]

.alias [
    .name uint
    .piqi-type.int

    .protobuf-type "uint32"
    .protobuf-wire-type.varint
]

.alias [
    .name int32
    .piqi-type.int

    .protobuf-type "sint32"
    .protobuf-wire-type.zigzag-varint
]

.alias [
    .name uint32
    .piqi-type.int

    .protobuf-type "uint32"
    .protobuf-wire-type.varint
]

.alias [
    .name int64
    .piqi-type.int

    .protobuf-type "sint64"
    .protobuf-wire-type.zigzag-varint
]

.alias [
    .name uint64
    .piqi-type.int

    .protobuf-type "uint64"
    .protobuf-wire-type.varint
]


% Fixed versions of int32/64 and uint32/64. "Fixed" here means that they are
% represented on the wire using exactly 4 and 8 bytes respectively.
.alias [
    .name int32-fixed
    .type int32
    .piqi-type.int

    .protobuf-type "sfixed32"
    .protobuf-wire-type.signed-fixed32
]

.alias [
    .name uint32-fixed
    .type uint32
    .piqi-type.int

    .protobuf-type "fixed32"
    .protobuf-wire-type.fixed32
]

.alias [
    .name int64-fixed
    .type int64
    .piqi-type.int

    .protobuf-type "sfixed64"
    .protobuf-wire-type.signed-fixed64
]

.alias [
    .name uint64-fixed
    .type uint64
    .piqi-type.int

    .protobuf-type "fixed64"
    .protobuf-wire-type.fixed64
]


% These two types are specific to Protocol Buffers. They have the same
% on-the-wire representation as uint32/64. The difference is that they allow
% negative integers which representation is very inefficient requiring many
% bytes for small absolue values.
.alias [
    .name protobuf-int32
    .type int32
    .piqi-type.int

    .protobuf-type "int32"
    .protobuf-wire-type.signed-varint
]

.alias [
    .name protobuf-int64
    .type int64
    .piqi-type.int

    .protobuf-type "int64"
    .protobuf-wire-type.signed-varint
]


.alias [
    .name float64
    .piqi-type.float

    .protobuf-type "double"
    .protobuf-wire-type.fixed64
]

.alias [
    .name float
    .type float64
    .piqi-type.float
]

.alias [
    .name float32
    .piqi-type.float

    .protobuf-type "float"
    .protobuf-wire-type.fixed32
]


%
% end of built-in types
%


.alias [
    .name word
    .type string

    .piq-format.word
]


.alias [
    .name name
    .type word
]


.variant [
    % user-defined types

    .name typedef

    .option [ .type record ]
    .option [ .type variant ]
    .option [ .type enum ]
    .option [ .type alias ]
    .option [
        .type list
    ]

    .protobuf-name "piqi_typedef"
]


.enum [
    % built-in Piqi types

    .name piqi-type

    .option [ .name int     .protobuf-name "piqi_type_int" ]
    .option [ .name float   .protobuf-name "piqi_type_float" ]
    .option [ .name bool    .protobuf-name "piqi_type_bool" ]
    .option [ .name string  .protobuf-name "piqi_type_string" ]
    .option [ .name binary  .protobuf-name "piqi_type_binary" ]
    .option [ .name any     .protobuf-name "piqi_type_any" ]
]


.alias [
    .name type
    .type name
]


.record [
    .name record 

    .field [ .type name ]
    .field [
        .type field
        .repeated
    ]
]


.record [
    .name field

    .field [
        .type name
        .optional
    ]
    .field [
        .type type
        .optional
    ]
    .field [
        .name mode
        .type field-mode
        .optional
        .default.required
    ]

    .field [
        .name default
        .type piqi-any
        .optional
    ]

    .field [
        % experimental: indication that the field has been deprecated; which
        % means that it may not be supported any more and use of such field is
        % discouraged

        .name deprecated
        .optional
    ]
]


.enum [
    .name field-mode

    .option [ required ]
    .option [ optional ]
    .option [ repeated ]
]


.record [
    .name variant
    .field [ .type name ]
    .field [
        .type option
        .repeated % > 1
    ]
]


.record [
    .name option

    % NOTE: either name or type have to be present
    .field [
        .type name
        .optional
    ]
    .field [
        .type type
        .optional
    ]
    .field [
        % experimental: indication that the option has been deprecated; which
        % means that it may not be supported any more and use of such field is
        % discouraged

        .name deprecated
        .optional
    ]
]


.record [
    .name enum

    .field [ .type name ]

    % note that enum options shouldn't specify type and must specify name
    .field [
        .type option
        .repeated % > 1
    ]

    .protobuf-name "piqi_enum"
]


.record [
    .name alias

    .field [ .type name ]

    % either type or piqi-type fields must be present; we don't use variant here
    % in order to simplify external representation which is going to be flat in
    % such case, as opposed to nested if we used variant
    .field [
        .type type
        .optional
    ]

    .field [
        .type piqi-type
        .optional
    ]
]


.record [
    .name list

    .field [ .type name ]
    .field [ .type type ]
]


.record [
    .name piqi

    .field [
        .name module
        .type word
        .optional
    ]

    .field [ .type typedef .repeated ]
    .field [ .type import .repeated ]
    .field [ .type function .repeated ]
]


.record [
    % import <module> as <name>
    .name import

    .field [
        .name module
        .type word
    ]

    .field [
        .type name
        .optional
    ]
]


% representation of the built-in "piqi-any" type
.record [
    .name any

    .field [
        % type could be optional or not fully resolved at all times
        .name type
        .type string
        .optional
    ]

    .field [
        % arbitrary data object corresponding to the type serialized in Protocol
        % Buffers format

        .name protobuf
        .type binary
        .optional
    ]
]


.record [
    .name function

    .field [ .type name ]

    .field [
        .name input
        .type type
        .optional
    ]

    .field [
        .name output
        .type type
        .optional
    ]

    .field [
        .name error
        .type type
        .optional
    ]
]


%
% standard extensions natively supported by Piqi
%

.include [ .module piqi.piq ]
.include [ .module piqi.protobuf ]
.include [ .module piqi.json ]
.include [ .module piqi.getopt ]

